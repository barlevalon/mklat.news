name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'public/**'
      - 'tests/**'
      - '*.js'
      - '*.json'
      - 'package*.json'
      - 'Dockerfile'
      - 'vite.config.js'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - 'tests/**'
      - '*.js'
      - '*.json'
      - 'package*.json'
      - 'Dockerfile'
      - 'vite.config.js'

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Test server start
        run: |
          PORT=3000 timeout 10 npm start &
          sleep 5
          curl -f http://localhost:3000/api/health

  publish:
    name: Build & Push Docker Image
    needs: [lint, test-unit, test-e2e, security, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker me-west1-docker.pkg.dev

    - name: Enable Artifact Registry API
      run: gcloud services enable artifactregistry.googleapis.com

    - name: Create Artifact Registry repository if needed
      run: |
        if ! gcloud artifacts repositories describe mklat-news --location=me-west1 &>/dev/null; then
          echo "Creating Artifact Registry repository..."
          # Retry up to 3 times with 30s delay to allow API enablement to propagate
          for i in {1..3}; do
            if gcloud artifacts repositories create mklat-news \
              --repository-format=docker \
              --location=me-west1 \
              --description="Docker repository for mklat.news app" 2>/dev/null; then
              echo "Repository created successfully"
              break
            else
              echo "Attempt $i failed, waiting 30 seconds for API to propagate..."
              sleep 30
            fi
          done
        else
          echo "Repository already exists"
        fi

    - name: Build Docker image
      run: |
        docker build -t me-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mklat-news/mklat-news:${{ github.sha }} .
        docker tag me-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mklat-news/mklat-news:${{ github.sha }} me-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mklat-news/mklat-news:latest

    - name: Push Docker image
      run: |
        docker push me-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mklat-news/mklat-news:latest
        docker push me-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mklat-news/mklat-news:${{ github.sha }}
